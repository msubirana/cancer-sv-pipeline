from os.path import basename
from glob import glob
from types import SimpleNamespace
import os
import utils
import pandas as pd

configfile: 'conf/config.yaml'


# Q: differences between jobs, tasks, nodes...
# nodes computers 
# tasks = cores (sbatch take a look)
# jobs rules
# -c max cores per jobs
# Q: add gargs to envs
# conda prefix? setup.py modify pip github repo 
# download first gargs 
# TODO: run cluster
# TODO: correct bam row problems
# TODO: batch file to the directory of snakemake and run
# TODO: stix indexes
# TODO: cnvs to inclue cnvkit and ask to Michael
# TODO: seenv
# TODO: seenv how to install inside snakemake? errors dependencies
# TODO: INSurVeyor for insertions in wes?
# TODO; after MC tag is everything ok?
# TODO: remove tmp files insurveyor

# EXAMPLE: config['ABC'] becomes config.ABC
# This allows for dot (.) access instead of dict access
# of configuration parameters.
config = SimpleNamespace(**config)

# sample name without any extension (tumor, ctrl and .bai extensions removed, example NET25)
# path of file
# type ("tumor" or "control")
# experiment ("WGS" or "WES")

samples_data = pd.read_csv(f'{config.samples_csv}')
samples_data = pd.read_csv('conf/samples.csv')
samples_wgs = list(set(samples_data['sample'][samples_data['experiment'] == 'wgs'].tolist()))
samples_wes = list(set(samples_data['sample'][samples_data['experiment'] == 'wes'].tolist()))

rule All:
    input:
        # installations
        f'{config.install_dir}/manta-{config.manta_version}.centos6_x86_64/bin/configManta.py',
        f'{config.install_dir}/excord',
        f'{config.install_dir}/duphold',
        f'{config.install_dir}/giggle/bin/giggle',
        f'{config.install_dir}/stix/bin/stix',
        f'{config.install_dir}/INSurVeyor/surveyor.py',
        f'{config.install_dir}/SeeNV/bin/seenv.py',
        # wgs
        expand(f'{config.outdir}/manta/{{sample_wgs}}_pass.vcf', sample_wgs=samples_wgs),
        expand(f'{config.outdir}/gridss/{{sample_wgs}}_pass.vcf', sample_wgs=samples_wgs), 
        expand(f'{config.outdir}/smoove/{{sample_wgs}}_pass.vcf', sample_wgs=samples_wgs),
        expand(f'{config.outdir}/delly/{{sample_wgs}}_pass.vcf', sample_wgs=samples_wgs),
        expand(f'{config.outdir}/insurveyor/{{sample_wgs}}/tumor_ctrl/{{sample_wgs}}_pass.vcf.gz', sample_wgs=samples_wgs),
        # f'{config.outdir}/cnvkit/finished.txt',
        #wes
        expand(f'{config.outdir}/manta_wes/{{sample_wes}}_pass.vcf', sample_wes=samples_wes),
        expand(f'{config.outdir}/smoove_wes/{{sample_wes}}_pass.vcf', sample_wes=samples_wes),
        expand(f'{config.outdir}/gridss_wes/{{sample_wes}}_pass.vcf', sample_wes=samples_wes),
        expand(f'{config.outdir}/delly_wes/{{sample_wes}}_pass.vcf', sample_wes=samples_wes),
        expand(f'{config.outdir}/insurveyor_wes/{{sample_wes}}/tumor_ctrl/{{sample_wes}}_pass.vcf.gz', sample_wes=samples_wes),
        # f'{config.outdir}/cnvkit_wes/finished.txt'
        # create stix index
        # filter stix
        # survivor


# diferent name in list expand
# ==============================================================================
# ==============================================================================
# INSTALLATION RULES
# ==============================================================================
# ==============================================================================
rule InstallExcord:
    """
    Pull excord bin from github release
    """
    input:
        script = "scripts/install_excord.sh",
    output:
        binary_excord = f'{config.install_dir}/excord',
    shell:
        """
        {input.script} {config.install_dir} {config.excord_version}
        """
rule InstallGiggle:
    """
    Build giggle from source
    """
    input:
        script = "scripts/install_giggle.sh",
    output:
        giggle = f'{config.install_dir}/giggle/bin/giggle', 
    shell:
        """
        {input.script} {config.install_dir}
        """
rule InstallStix:
    """
    Build stix and dependencies from source (Depends on giggle)
    """
    input:
        script = "scripts/install_stix.sh",
        giggle_path = f'{rules.InstallGiggle.output.giggle}', # wait for giggle
    output:
        stix = f'{config.install_dir}/stix/bin/stix',
    shell:
        """
        {input.script} {config.install_dir} {input.giggle_path}
        """
rule InstallManta:
    """
    Install manta from github release.
    """
    input:
        script = "scripts/install_manta.sh",
    output:
        # config is in bin/configManta.py
        installation = f'{config.install_dir}/manta-{config.manta_version}.centos6_x86_64/bin/configManta.py',
    shell:
        """
        {input.script} {config.install_dir} {config.manta_version}
        """
rule InstallDuphold:
    """
    Pull Duphold bin from github release
    """
    input:
        script = "scripts/install_duphold.sh",
    output:
        binary_duphold = f'{config.install_dir}/duphold',
    shell:
        """
        {input.script} {config.install_dir} {config.duphold_version}
        """
rule InstallINSurVeyor:
    """
    Build INSurVeyor from source
    """
    input:
        script = "scripts/install_insurveyor.sh",
    output:
        insurveyor = f'{config.install_dir}/INSurVeyor/surveyor.py', 
    shell:
        """
        {input.script} {config.install_dir}
        """
rule InstallSeeNV:
    """
    Build SeeNV from source
    """
    input:
        script = "scripts/install_seenv.sh",
    output:
        seenv = f'{config.install_dir}/SeeNV/bin/seenv.py', 
    shell:
        """
        {input.script} {config.install_dir}
        """
# ==============================================================================
# ==============================================================================
# CREATE STIX INDEXES
# ==============================================================================
# ==============================================================================
# ==============================================================================
# Create a STIX index with tumor samples
# ==============================================================================
# ruleorder: rule1 > rule2 > rule3
rule ExcordTumors:
    """
    Extract discordant/split reads from tumor BAMs
    """
    input:
        script = "scripts/Excord.sh",
        reference = f'{config.reference}',
        excord = f'{rules.InstallExcord.output.binary_excord}',
    output:
        f'{config.outdir}/excord/tumors/{{sample_wgs}}.bed.gz',
    params:
        tumor = lambda wildcards: samples_data['tumor'][samples_data['sample']==wildcards.sample_wgs].tolist()[0],
    log:
        f'{config.outdir}/logs/ExcordTumors_{{sample_wgs}}.log',
    conda:
        'envs/excord.yaml',
    shell:
        """
        {input.script} {params.tumor} {input.reference} {output.bed} {input.excord}
        """
rule MakeGiggleIndexTumors:
    """
    Create giggle index from excord bedpe's
    """
    input:
        expand(f'{config.outdir}/excord/tumors/{{sample_wgs}}.bed.gz', sample_wgs=samples_wgs),
        script = "scripts/MakeGiggleIndex.sh",
        giggle = f'{rules.InstallGiggle.output.giggle}',
        excord_path = f'{config.outdir}/excord/tumors/',
    output:
        directory(f'{config.outdir}/giggle/tumor'),
    log:
        f'{config.outdir}/logs/MakeGiggleIndexTumors.log',
    shell:
        """
        {input.script} {input.giggle} {input.excord_path} {output}
        """
rule MakeSTIXIndexTumors:
    """
    Create STIX index from giggle index
    """
    input:
        script = "scripts/MakeSTIXIndex.sh",
        stix = f'{rules.InstallStix.output.stix}',
        giggle_index = f'{rules.MakeGiggleIndexTumors.output}',
        ped = '/home/msubirana/Documents/phd/repos/cancer-sv-pipeline/results/giggle/tumors.ped'
    output:
        f'{config.outdir}/stix/tumor.ped.db',
    log:
        f'{config.outdir}/logs/MakeSTIXIndexTumors_.log',
    shell:
        """
        {input.script} {input.stix} {input.giggle_index} {output} {input.ped}
        """
# ==============================================================================
# Create a STIX index with CTRL samples
# ==============================================================================
rule ExcordCtrls:
    """
    Extract discordant/split reads from ctrl BAMs
    """
    input:
        script = "scripts/Excord.sh",
        reference = f'{config.reference}',
        excord = f'{rules.InstallExcord.output.binary_excord}',
    output:
        f'{config.outdir}/excord/ctrls/{{sample_wgs}}.bed.gz',
    params:
        ctrl = lambda wildcards: samples_data['ctrl'][samples_data['sample']==wildcards.sample_wgs].tolist()[0],
    log:
        f'{config.outdir}/logs/ExcordCtrls_{{sample_wgs}}.log',
    conda:
        'envs/excord.yaml',
    shell:
        """
        {input.script} {params.ctrl} {input.reference} {output.bed} {input.excord}
        """
rule MakeGiggleIndexCtrls:
    """
    Create giggle index from excord bedpe's
    """
    input:
        expand(f'{config.outdir}/excord/ctrls/{{sample_wgs}}.bed.gz', sample_wgs=samples_wgs),
        script = "scripts/MakeGiggleIndex.sh",
        giggle = f'{rules.InstallGiggle.output.giggle}',
        excord_path = f'{config.outdir}/excord/ctrls',
    output:
        directory(f'{config.outdir}/giggle/ctrl'),
    log:
        f'{config.outdir}/logs/MakeGiggleIndexCtrls.log',
    shell:
        """
        {input.script} {input.giggle} {input.excord_path} {output}
        """
rule MakeSTIXIndexCtrls:
    """
    Create STIX index from giggle index
    """
    input:
        script = "scripts/MakeSTIXIndex.sh",
        stix = f'{rules.InstallStix.output.stix}',
        giggle_index = f'{rules.MakeGiggleIndexCtrls.output}',
        ped = '/home/msubirana/Documents/phd/repos/cancer-sv-pipeline/results/giggle/ctrls.ped'
    output:
        f'{config.outdir}/stix/ctrl.ped.db',
    log:
        f'{config.outdir}/logs/MakeSTIXIndexCtrls.log',
    shell:
        """
        {input.script} {input.stix} {input.giggle_index} {output} {input.ped}
        """
# ==============================================================================
# ==============================================================================
# WGS CALLING
# ==============================================================================
# ==============================================================================
# ==============================================================================
# GRIDSS Rules
# ==============================================================================
rule gridss:  
    input:
        script = 'scripts/gridss.sh',
        reference = f'{config.reference}',
        exclude = f'{config.exclude_bed}', 
        duphold = f'{rules.InstallDuphold.output.binary_duphold}',
        script_ann = 'scripts/sv_type_infer_gridss.R'
    output:
        f'{config.outdir}/gridss/{{sample_wgs}}_pass.vcf',
    params:
        tumor = lambda wildcards: samples_data['tumor'][samples_data['sample']==wildcards.sample_wgs].tolist()[0],
        ctrl = lambda wildcards: samples_data['ctrl'][samples_data['sample']==wildcards.sample_wgs].tolist()[0]
    threads:
        workflow.cores
    log:
        f'{config.outdir}/logs/gridss_{{sample_wgs}}.log',
    conda:
        'envs/gridss.yaml',
    shell:
        """
        {input.script} {input.reference} {output} {input.exclude} {params.ctrl} {params.tumor} \
            {threads} {input.script_ann} {wildcards.sample_wgs} {input.duphold}
        """
# ==============================================================================
# Delly Rules
# ==============================================================================
rule delly:  
    input:
        script = 'scripts/delly.sh',
        reference = f'{config.reference}',
        exclude = f'{config.exclude_bed}', 
        duphold = f'{rules.InstallDuphold.output.binary_duphold}',
    output:
        f'{config.outdir}/delly/{{sample_wgs}}_pass.vcf',
    params:
        tumor = lambda wildcards: samples_data['tumor'][samples_data['sample']==wildcards.sample_wgs].tolist()[0],
        ctrl = lambda wildcards: samples_data['ctrl'][samples_data['sample']==wildcards.sample_wgs].tolist()[0]
    threads: 2
    log:
        f'{config.outdir}/logs/delly_{{sample_wgs}}.log',
    conda:
        'envs/delly.yaml',
    shell:
        """
        {input.script} {input.reference} {output} {input.exclude} {params.ctrl} {params.tumor} \
            {threads} {wildcards.sample_wgs} {input.duphold}
        """
# ==============================================================================
# Manta Rules
# ==============================================================================
rule ConfigManta:
    """
    Configure the manta calling workflow
    """
    input:
        script = 'scripts/conf_manta.sh',
        configManta = f'{rules.InstallManta.output.installation}',
        reference = f'{config.reference}',
    params:
        rundir = f'{config.outdir}/manta/{{sample_wgs}}_manta',
        tumor = lambda wildcards: samples_data['tumor'][samples_data['sample']==wildcards.sample_wgs].tolist()[0],
        ctrl = lambda wildcards: samples_data['ctrl'][samples_data['sample']==wildcards.sample_wgs].tolist()[0]
    output:
        runPy = f'{config.outdir}/manta/{{sample_wgs}}_manta/runWorkflow.py',
    log:
        f'{config.outdir}/logs/ConfigManta_{{sample_wgs}}.log',
    shell:
        """
        {input.script} {input.configManta} \
                    {params.tumor} \
                    {params.ctrl} \
                    {input.reference} \
                    {params.rundir} 
        """
rule RunManta:
    """
    Run manta
    """
    input:
        script = 'scripts/run_manta.sh',
        rundir = f'{rules.ConfigManta.output.runPy}',
        reference = f'{config.reference}',
        outdir=f'{config.outdir}/manta',
        duphold = f'{rules.InstallDuphold.output.binary_duphold}',
    output: 
        f'{config.outdir}/manta/{{sample_wgs}}_pass.vcf',
    params:
        out_run_manta=f'{config.outdir}/manta/{{sample_wgs}}_manta/results/variants/somaticSV.vcf.gz',
        tumor = lambda wildcards: samples_data['tumor'][samples_data['sample']==wildcards.sample_wgs].tolist()[0],
    threads:
        workflow.cores,
    conda:
        'envs/manta.yaml',
    log:
        f'{config.outdir}/logs/RunManta_{{sample_wgs}}.log',
    shell:
        """
        {input.script} {input.rundir} {threads} {params.out_run_manta} {params.tumor} {input.reference} {wildcards.sample_wgs} {input.outdir} {input.duphold}
        """
# ==============================================================================
# Smoove Rules
# Lumpy will just report all SVs so filtering will need to be done
# with STIX to get rid of germline variants
# ==============================================================================
rule smoove:
    input:
        script = 'scripts/smoove.sh',
        exclude = f'{config.exclude_bed}', 
        reference = f'{config.reference}',
        duphold = f'{rules.InstallDuphold.output.binary_duphold}',
    output:
        f'{config.outdir}/smoove/{{sample_wgs}}_pass.vcf',
    params:
        output_dir = f'{config.outdir}/smoove',
        tumor = lambda wildcards: samples_data['tumor'][samples_data['sample']==wildcards.sample_wgs].tolist()[0],
    threads:
        workflow.cores,
    log:
        f'{config.outdir}/logs/smoove_{{sample_wgs}}.log',
    conda:
        'envs/smoove.yaml',
    shell:
        """
        {input.script} {params.output_dir} {input.exclude} {wildcards.sample_wgs} {input.reference} {params.tumor} {input.duphold} {workflow.cores}
        """
# ==============================================================================
# CNVkit Rules
# ==============================================================================
rule cnvkit:
    input:
        script = 'scripts/cnvkit.R',
        reference = f'{config.reference}',
        samples_csv = 'conf/samples.csv', # {config.samples_csv}
        refFlat = f'{config.refFlat}',
        out_path = f'{config.outdir}'
    output:
        f'{config.outdir}/cnvkit/finished.txt',
    threads:
        workflow.cores,
    log:
        f'{config.outdir}/logs/cnvkit.log',
    conda:
        'envs/cnvkit.yaml',
    shell:
        """
        Rscript {input.script} {input.reference} {input.refFlat} {input.samples_csv} {threads} {input.out_path}
        """
# ==============================================================================
# INSurVeyor Rules
# ==============================================================================
rule insurveyor:
    input:
        script = 'scripts/insurveyor.sh',
        insurveyor_py = f'{rules.InstallINSurVeyor.output.insurveyor}',
        reference = f'{config.reference}',
        workdir = f'{config.outdir}'
    output:
        f'{config.outdir}/insurveyor/{{sample_wgs}}/tumor_ctrl/{{sample_wgs}}_pass.vcf.gz'
    params:
        tumor = lambda wildcards: samples_data['tumor'][samples_data['sample']==wildcards.sample_wgs].tolist()[0],
        ctrl = lambda wildcards: samples_data['ctrl'][samples_data['sample']==wildcards.sample_wgs].tolist()[0]
    threads:
        workflow.cores,
    log:
        f'{config.outdir}/logs/insurveyor_{{sample_wgs}}.log',
    conda:
        'envs/insurveyor.yaml',
    shell:
        """
        {input.script} {input.insurveyor_py} {threads} {params.tumor} {params.ctrl} {input.workdir} {input.reference} {wildcards.sample_wgs}
        """
# ==============================================================================
# TODO STIX filtering for germline SV callers
# ==============================================================================

# ==============================================================================
# ==============================================================================
# WES CALLING
# ==============================================================================
# ==============================================================================
# ==============================================================================
# Manta WES Rules
# ==============================================================================
rule ConfigMantaWes:
    """
    Configure the manta calling workflow
    """
    input:
        script = 'scripts/conf_manta_wes.sh',
        configManta = f'{rules.InstallManta.output.installation}',
        reference = f'{config.reference}',
    params:
        rundir = f'{config.outdir}/manta_wes/{{sample_wes}}_manta',
        tumor = lambda wildcards: samples_data['tumor'][samples_data['sample']==wildcards.sample_wes].tolist()[0],
        ctrl = lambda wildcards: samples_data['ctrl'][samples_data['sample']==wildcards.sample_wes].tolist()[0]
    output:
        runPy = f'{config.outdir}/manta_wes/{{sample_wes}}_manta/runWorkflow.py',
    log:
        f'{config.outdir}/logs/ConfigMantaWes_{{sample_wes}}.log',
    shell:
        """
        {input.script} {input.configManta} \
                    {params.tumor} \
                    {params.ctrl} \
                    {input.reference} \
                    {params.rundir} 
        """
rule RunMantaWes:
    """
    Run manta
    """
    input:
        script = 'scripts/run_manta.sh',
        rundir = f'{rules.ConfigMantaWes.output.runPy}',
        reference = f'{config.reference}',
        outdir=f'{config.outdir}/manta_wes',
        duphold = f'{rules.InstallDuphold.output.binary_duphold}'
    output: 
        f'{config.outdir}/manta_wes/{{sample_wes}}_pass.vcf',
    params:
        out_run_manta=f'{config.outdir}/manta_wes/{{sample_wes}}_manta/results/variants/somaticSV.vcf.gz',
        tumor = lambda wildcards: samples_data['tumor'][samples_data['sample']==wildcards.sample_wes].tolist()[0],
    threads:
        workflow.cores,
    conda:
        'envs/manta.yaml',
    log:
        f'{config.outdir}/logs/RunMantaWes_{{sample_wes}}.log',
    shell:
        """
        {input.script} {input.rundir} {threads} {params.out_run_manta} {params.tumor} {input.reference} {wildcards.sample_wes} {input.outdir} {input.duphold}
        """
# ==============================================================================
# Smoove WES Rules
# Lumpy will just report all SVs so filtering will need to be done
# with STIX to get rid of germline variants
# ==============================================================================
rule smoove_wes:
    input:
        script = 'scripts/smoove.sh',
        exclude = f'{config.exclude_bed}', 
        reference = f'{config.reference}',
        duphold = f'{rules.InstallDuphold.output.binary_duphold}',
    output:
        f'{config.outdir}/smoove_wes/{{sample_wes}}_pass.vcf',
    params:
        output_dir = f'{config.outdir}/smoove_wes',
        tumor = lambda wildcards: samples_data['tumor'][samples_data['sample']==wildcards.sample_wes].tolist()[0],
    threads:
        workflow.cores,
    log:
        f'{config.outdir}/logs/smoove_wes_{{sample_wes}}.log',
    conda:
        'envs/smoove.yaml',
    shell:
        """
        {input.script} {params.output_dir} {input.exclude} {wildcards.sample_wes} {input.reference} {params.tumor} {input.duphold} {workflow.cores}
        """
# ==============================================================================
# GRIDSS WES Rules
# ==============================================================================
rule gridss_wes:  
    input:
        script = 'scripts/gridss_wes.sh',
        reference = f'{config.reference}',
        exclude = f'{config.exclude_bed}', 
        script_ann = 'scripts/sv_type_infer_gridss.R',
        CONFIGURATION_FILE = 'data/gridss_wes.properties',
        duphold = f'{rules.InstallDuphold.output.binary_duphold}'
    output:
        f'{config.outdir}/gridss_wes/{{sample_wes}}_pass.vcf',
    params:
        tumor = lambda wildcards: samples_data['tumor'][samples_data['sample']==wildcards.sample_wes].tolist()[0],
        ctrl = lambda wildcards: samples_data['ctrl'][samples_data['sample']==wildcards.sample_wes].tolist()[0]
    threads:
        workflow.cores
    log:
        f'{config.outdir}/logs/gridss_wes_{{sample_wes}}.log',
    conda:
        'envs/gridss.yaml',
    shell:
        """
        {input.script} {input.reference} {output} {input.exclude} {params.ctrl} \
            {params.tumor} {threads} {input.script_ann} {wildcards.sample_wes} {input.duphold} {input.CONFIGURATION_FILE} 
        """
# ==============================================================================
# Delly WES Rules
# ==============================================================================
rule delly_wes:  
    input:
        script = 'scripts/delly.sh',
        reference = f'{config.reference}',
        exclude = f'{config.exclude_bed}', 
        duphold = f'{rules.InstallDuphold.output.binary_duphold}',
    output:
        f'{config.outdir}/delly_wes/{{sample_wes}}_pass.vcf',
    params:
        tumor = lambda wildcards: samples_data['tumor'][samples_data['sample']==wildcards.sample_wes].tolist()[0],
        ctrl = lambda wildcards: samples_data['ctrl'][samples_data['sample']==wildcards.sample_wes].tolist()[0]
    threads: 2
    log:
        f'{config.outdir}/logs/delly_wes_{{sample_wes}}.log',
    conda:
        'envs/delly.yaml',
    shell:
        """
        {input.script} {input.reference} {output} {input.exclude} {params.ctrl} {params.tumor} \
            {threads} {wildcards.sample_wes} {input.duphold}
        """
# ==============================================================================
# CNVkit WES Rules
# ==============================================================================
rule cnvkit_wes:
    input:
        script = 'scripts/cnvkit_wes.R',
        reference = f'{config.reference}',
        samples_csv = 'conf/samples.csv',
        refFlat = f'{config.refFlat}',
        out_path = f'{config.outdir}',
        access_excludes = f'{config.access_excludes}',
        exomes_hg38 = f'{config.exomes_hg38}'
    output:
        f'{config.outdir}/cnvkit_wes/finished.txt',
    threads:
        workflow.cores,
    log:
        f'{config.outdir}/logs/cnvkit_wes.log',
    conda:
        'envs/cnvkit.yaml',
    shell:
        """
        Rscript {input.script} {input.reference} {input.refFlat} {input.samples_csv} {threads} {input.out_path} {input.access_excludes} {input.exomes_hg38}
        """
# ==============================================================================
# INSurVeyor WES Rules
# ==============================================================================
rule insurveyor_wes:
    input:
        script = 'scripts/insurveyor_wes.sh',
        insurveyor_py = f'{rules.InstallINSurVeyor.output.insurveyor}',
        reference = f'{config.reference}',
        workdir = f'{config.outdir}'
    output:
        f'{config.outdir}/insurveyor_wes/{{sample_wes}}/tumor_ctrl/{{sample_wes}}_pass.vcf.gz'
    params:
        tumor = lambda wildcards: samples_data['tumor'][samples_data['sample']==wildcards.sample_wes].tolist()[0],
        ctrl = lambda wildcards: samples_data['ctrl'][samples_data['sample']==wildcards.sample_wes].tolist()[0]
    threads:
        workflow.cores,
    log:
        f'{config.outdir}/logs/insurveyor_wes_{{sample_wes}}.log',
    conda:
        'envs/insurveyor.yaml',
    shell:
        """
        {input.script} {input.insurveyor_py} {threads} {params.tumor} {params.ctrl} {input.workdir} {input.reference} {wildcards.sample_wes}
        """
# ==============================================================================
# SeeNV Rules
# ==============================================================================
