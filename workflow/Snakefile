from os.path import basename
from glob import glob
from types import SimpleNamespace
import os
import utils

configfile: 'conf/config.yaml'

# how to snakemake -j 1  --use-conda with mamba
# to do define threads gridss?
# conda for smoove 
# duphold (annotate vcf with values for del and dup log2 region and flanking filter del) all sv callers
# annotation gridss to del, dup...
# test individually 
# filter duphold 
# stix filtering reduce sizes vcf 
# survivor faster!
# excore like bam files sv evidence (paral) 
# giggle from source c++ snakemake rule output is a bin 
# create giggle index one for all tumors and all ctrl backbound of stix index (1st 2 bams)
# stix install from source
# stix index faster than giggle
# create hg38 1000g index for stix (crams) 3 bams excord high cov
# This allows for dot (.) access instead of dict access
# of configuration parameters.
# EXAMPLE: config['ABC'] becomes config.ABC
config = SimpleNamespace(**config)

# file follows {sample}_{BL|TI}.bam name scheme
samples = list(set([basename(x).split('_')[0]
    for x in glob(os.path.join(config.bam_dir, '*.bam'))]))


rule All:
    input:
        f'{config.install_dir}/manta-{config.manta_version}.centos6_x86_64/bin/configManta.py',
        f'{config.install_dir}/excord',
        f'{config.install_dir}/giggle/bin/giggle',
        f'{config.install_dir}/stix/bin/stix',
        expand(f'{config.outdir}/manta/{{sample}}_pass.vcf', sample=samples),
        expand(f'{config.outdir}/delly/{{sample}}_pass.vcf', sample=samples),
        expand(f'{config.outdir}/gridss/{{sample}}_pass.vcf', sample=samples), 
        expand(f'{config.outdir}/smoove/genotyped/{{sample}}-smoove.genotyped.vcf.gz', sample=samples),
        expand(f'{config.outdir}/excord/{{sample}}.bed.gz', sample=samples)
        
        
# ==============================================================================
# Installation Rules
# ==============================================================================
rule InstallExcord:
    """
    Pull excord bin from github release
    """
    input:
        script = "scripts/install_excord.sh",
    output:
        binary_excord = f'{config.install_dir}/excord',
    shell:
        """
        {input.script} {config.install_dir} {config.excord_version}
        """
rule InstallGiggle:
    """
    Build giggle from source
    """
    input:
        script = "scripts/install_giggle.sh",
    output:
        giggle = f'{config.install_dir}/giggle/bin/giggle', 
    shell:
        """
        {input.script} {config.install_dir}
        """
rule InstallStix:
    """
    Build stix and dependencies from source (Depends on giggle)
    """
    input:
        script = "scripts/install_stix.sh",
        giggle_path = f'{rules.InstallGiggle.output.giggle}', # wait for giggle
    output:
        stix = f'{config.install_dir}/stix/bin/stix',
    shell:
        """
        {input.script} {config.install_dir} {input.giggle_path}
        """
rule InstallManta:
    """
    Install manta from github release.
    """
    input:
        script = "scripts/install_manta.sh",
    output:
        # config is in bin/configManta.py
        installation = f'{config.install_dir}/manta-{config.manta_version}.centos6_x86_64/bin/configManta.py',
    shell:
        """
        {input.script} {config.install_dir} {config.manta_version}
        """

# ==============================================================================
# TODO STIX index creation
# Create a STIX index with tumor samples
# ==============================================================================
rule ExcordTumors:
    """
    Extract discordant/split reads from tumor BAMs
    """
    input:
        script = "scripts/ExcordTumors.sh",
        tumor_bam = f'{config.bam_dir}/{{sample}}_TI.bam',
        reference = f'{config.reference}',
        excord = f'{rules.InstallExcord.output.binary_excord}',
    output:
        f'{config.outdir}/excord/{{sample}}.bed.gz',
    log:
        f'logs/ExcordTumors_{{sample}}.log',
    conda:
        'envs/excord.yaml',
    shell:
        """
        {input.script} {input.tumor_bam} {input.reference} {output} {input.excord}
        """
rule MakeGiggleIndex:
    """
    Create giggle index from excord bedpe's
    """

rule MakeSTIXIndex:
    """
    Create STIX index from giggle index
    """
# ==============================================================================
# GRIDSS Rules
# ==============================================================================
rule gridss:  
    input:
        script = 'scripts/gridss.sh',
        tumor_bam = f'{config.bam_dir}/{{sample}}_TI.bam',
        normal_bam = f'{config.bam_dir}/{{sample}}_BL.bam',
        reference = f'{config.reference}',
        exclude = f'{config.exclude_bed}',
    output:
        f'{config.outdir}/gridss/{{sample}}.vcf',
    log:
        f'logs/gridss_{{sample}}.log',
    conda:
        'envs/gridss.yaml',
    shell:
        """
        {input.script} {input.reference} {output} {input.exclude} {input.normal_bam} {input.tumor_bam}
        """

rule annotatedGridss:
    """
    Filter PASS variants Gridss
    """
    input:
        script = 'scripts/sv_type_infer_gridss.R',
        input_vcf = f'{rules.gridss.output}',
    output:
        f'{config.outdir}/gridss/{{sample}}_ann.vcf',
    log:
        f'logs/annotatedGridss{{sample}}.log',    
    conda:
        'envs/gridss.yaml',
    shell:
        """
        Rscript {input.script} {input.input_vcf} {output}
        """

rule filterGridss:
    """
    Filter PASS variants Gridss
    """
    input:
        script = 'scripts/bcftools_filter.sh',
        input_vcf = f'{rules.annotatedGridss.output}',
    output:
        f'{config.outdir}/gridss/{{sample}}_pass.vcf',
    log:
        f'logs/filterGridss_{{sample}}.log',    
    conda:
        'envs/post_processing.yaml',
    shell:
        """
        {input.script} {input.input_vcf} {output}
        """



# ==============================================================================
# Delly Rules
# ==============================================================================
rule delly_bcf:
    input:
        ref = f'{config.reference}',
        alns = [f'{config.bam_dir}/{{sample}}_TI.bam', f'{config.bam_dir}/{{sample}}_BL.bam'],
        exclude = f'{config.exclude_bed}',
    output:
        f'{config.outdir}/delly/{{sample}}.bcf',
    conda:
        'envs/delly.yaml',
    params:
        uncompressed_bcf=True,
    log:
        f'logs/delly_bcf_{{sample}}.log',   
    threads: 2  # It is best to use as many threads as samples
    wrapper:
        "v1.19.2/bio/delly"

rule filterDelly:
    """
    Filter PASS variants Delly
    """
    input:
        script = 'scripts/bcftools_filter.sh',
        input_vcf = f'{rules.delly_bcf.output}',
    output:
        f'{config.outdir}/delly/{{sample}}_pass.vcf',
    log:
        f'logs/filterDelly_{{sample}}.log',   
    conda:
        'envs/post_processing.yaml',
    shell:
        """
        {input.script} {input.input_vcf} {output}
        """

# ==============================================================================
# MANTA Rules
# ==============================================================================

rule ConfigManta:
    """
    Configure the manta calling workflow
    """
    input:
        script = 'scripts/conf_manta.sh',
        configManta = f'{rules.InstallManta.output.installation}',
        tumor_bam = f'{config.bam_dir}/{{sample}}_TI.bam',
        normal_bam = f'{config.bam_dir}/{{sample}}_BL.bam',
        reference = f'{config.reference}',
    params:
        rundir = f'{config.outdir}/manta/{{sample}}_manta',
    output:
        runPy = f'{config.outdir}/manta/{{sample}}_manta/runWorkflow.py',
    log:
        f'logs/ConfigManta_{{sample}}.log',
    shell:
        """
        {input.script} {input.configManta} \
                    {input.tumor_bam} \
                    {input.normal_bam} \
                    {input.reference} \
                    {params.rundir} 
        """
        
rule RunManta:
    """
    Run manta
    """
    input:
        script = 'scripts/run_manta.sh',
        rundir = f'{rules.ConfigManta.output.runPy}',
    output: 
        f'{config.outdir}/manta/{{sample}}_manta/results/variants/somaticSV.vcf.gz',
    log:
        f'logs/RunManta_{{sample}}.log',
    shell:
        """
        {input.script} {input.rundir} {threads}
        """

rule filterManta:
    """
    Filter PASS variants manta
    """
    input:
        script = 'scripts/bcftools_filter.sh',
        input_vcf = rules.RunManta.output,
    output:
        f'{config.outdir}/manta/{{sample}}_pass.vcf',
    log:
        f'logs/filterManta_{{sample}}.log',
    conda:
        'envs/post_processing.yaml',
    shell:
        """
        {input.script} {input.input_vcf} {output}
        """

# ==============================================================================
# TODO Smoove (lumpy/SVTYPER) rules
# Lumpy will just report all SVs so filtering will need to be done
# with STIX to get rid of germline variants
# ==============================================================================

rule smoove_call:
    input:
        script = 'scripts/smoove_call.sh',
        tumor_bam = f'{config.bam_dir}/{{sample}}_TI.bam',
        exclude = f'{config.exclude_bed}', 
        reference = f'{config.reference}',
    output:
        f'{config.outdir}/smoove/called/{{sample}}-smoove.genotyped.vcf.gz',
    params:
        output_dir = f'{config.outdir}/smoove/called',
    log:
        f'logs/smoove_call_{{sample}}.log',
    conda:
        'envs/smoove.yaml',
    shell:
        """
        {input.script} {params.output_dir} {input.exclude} {wildcards.sample} {input.reference} {input.tumor_bam}
        """
rule smoove_genotype:
    input: 
        script = 'scripts/smoove_genotype.sh',
        vcf = rules.smoove_call.output,
        tumor_bam = f'{config.bam_dir}/{{sample}}_TI.bam',
        reference = f'{config.reference}',
    output:
        f'{config.outdir}/smoove/genotyped/{{sample}}-smoove.genotyped.vcf.gz',
    log:
        f'logs/smoove_genotype_{{sample}}.log',
    params:
        output_dir = f'{config.outdir}/smoove/genotyped',
    conda:
        'envs/smoove.yaml',
    shell: 
        """
        {input.script} {wildcards.sample} {params.output_dir} {input.reference} {input.vcf} {input.tumor_bam}
        """
# ==============================================================================
# TODO STIX filtering for germline SV callers
# ==============================================================================
