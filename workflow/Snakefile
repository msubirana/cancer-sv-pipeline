from os.path import basename
from glob import glob
from types import SimpleNamespace
import os
configfile: 'conf/config.yaml'

# how to snakemake -j 1  --use-conda with mamba

# This allows for dot (.) access instead of dict access
# of configuration parameters.
# EXAMPLE: config['ABC'] becomes config.ABC
config = SimpleNamespace(**config)

# file follows {sample}_{BL|TI}.bam name scheme
samples = list(set([basename(x).split('_')[0]
    for x in glob(os.path.join(config.bam_dir, '*.bam'))]))


rule All:
    input:
        expand(f'{config.outdir}/manta/{{sample}}.vcf', sample=samples),
        expand(f'{config.outdir}/delly/{{sample}}.vcf', sample=samples)
        
# ==============================================================================
# Installation Rules
# ==============================================================================
rule InstallExcord:
    """
    Pull excord bin from github release
    """

rule InstallGiggle:
    """
    Build giggle from source
    """

rule InstallStix:
    """
    Build stix and dependencies from source (Depends on giggle)
    """
    
rule InstallDelly:
    """
    Install delly from github"""

rule InstallManta:
    """
    Install manta from github release.
    """
    input:
        script = "scripts/install_manta.sh"
    output:
        # config is in bin/configManta.py
        installation = f'{config.manta_install_dir}/manta-{config.manta_version}.centos6_x86_64/bin/configManta.py'
    shell:
        """
        {input.script} {config.manta_install_dir} {config.manta_version}
        """

# adds dependencies and exclude file
rule InstallGridss:
    """
    Install gridss from github release.
    """
    input:
        script = "scripts/install_gridss.sh"
    output:
        dependencies = f'{config.gridss_install_dir}/gridss-{config.gridss_version}-gridss-jar-with-dependencies.jar',
        exclude_list = f'{config.gridss_install_dir}/exclude_list.bed' # exclude is download as well
    shell:
        """
        {input.script} {config.gridss_install_dir} {config.gridss_version}
        """


# ==============================================================================
# TODO STIX index creation
# Create a STIX index with tumor samples
# ==============================================================================

rule ExcordTumors:
    """
    Extract discordant/split reads from tumor BAMs
    """
rule MakeGiggleIndex:
    """
    Create giggle index from excord bedpe's
    """

rule MakeSTIXIndex:
    """
    Create STIX index from giggle index
    """

# ==============================================================================
# Lumpy Rules
# ==============================================================================
# remove this rule and replace with smooth 
# two rules one for tumor and the other ctrl for paried calling (rm germline)
rule lumpy_sv:  
    input:
        tumor_bam = f'{config.bam_dir}/{{sample}}_TI.bam',
        normal_bam = f'{config.bam_dir}/{{sample}}_BL.bam',
        reference = f'{config.reference}'
    output:
        f'{config.outdir}/lumpy/{{sample}}.vcf',
    conda:
        'envs/lumpy.yaml'
    shell:
        """
        set -xe

        lumpyexpress \
            -B {input.tumor_bam},{input.normal_bam}\
            -o {output} 
        """

# ==============================================================================
# GRIDSS Rules
# ==============================================================================
rule gridss:  
    input:
        tumor_bam = f'{config.bam_dir}/{{sample}}_TI.bam',
        normal_bam = f'{config.bam_dir}/{{sample}}_BL.bam',
        reference = f'{config.reference}',
        exclude_list = f'{rules.InstallGridss.output.exclude_list}',
        dependencies = f'{rules.InstallGridss.output.dependencies}'
    output:
        f'{config.outdir}/gridss/{{sample}}.vcf',
    conda:
        'envs/gridss.yaml'
    shell:
        """
        scripts/gridss.sh {input.reference} \
                {input.dependencies} \
                {output} \
                {input.exclude_list} \ 
                {input.normal_bam} \
                {input.tumor_bam}
        """


# ==============================================================================
# Delly Rules
# ==============================================================================
rule delly_bcf:
    input:
        ref = f'{config.reference}',
        alns = [f'{config.bam_dir}/{{sample}}_TI.bam', f'{config.bam_dir}/{{sample}}_BL.bam'],
        exclude = f'{config.delly_excl}'
    output:
        f'{config.outdir}/delly/{{sample}}.bcf',
    conda:
        'envs/delly.yaml'
    params:
        uncompressed_bcf=True,
    log:
        f'{config.outdir}/delly/logs/{{sample}}_delly.log',
    threads: 2  # It is best to use as many threads as samples
    wrapper:
        "v1.19.2/bio/delly"

rule filterDelly:
    """
    Filter PASS variants Delly
    """
    input:
        input_vcf = f'{config.outdir}/delly/{{sample}}.bcf',
    output:
        f'{config.outdir}/delly/{{sample}}.vcf',
    conda:
        'envs/post_processing.yaml'
    shell:
        """
        scripts/bcftools_filter.sh {input.input_vcf} {output}
        """

# ==============================================================================
# MANTA Rules
# ==============================================================================

rule ConfigManta:
    """
    Configure the manta calling workflow
    """
    input:
        configManta = f'{rules.InstallManta.output.installation}',
        tumor_bam = f'{config.bam_dir}/{{sample}}_TI.bam',
        normal_bam = f'{config.bam_dir}/{{sample}}_BL.bam',
        reference = f'{config.reference}'
    params:
        rundir = f'{config.outdir}/manta/{{sample}}_manta'
    output:
        runPy = f'{config.outdir}/manta/{{sample}}_manta/runWorkflow.py'
    shell:
        """
        scripts/conf_manta.sh {input.configManta} \
                    {input.tumor_bam} \
                    {input.normal_bam} \
                    {input.reference} \
                    {params.rundir} 
        """
        
rule RunManta:
    """
    Run manta
    """
    input:
        rundir = f'{rules.ConfigManta.output.runPy}'
    output: 
        manta_vcf = f'{config.outdir}/manta/{{sample}}_manta/results/variants/somaticSV.vcf.gz'
    shell:
        """
        scripts/run_manta.sh {input.rundir} {threads}
        """

rule filterManta:
    """
    Filter PASS variants manta
    """
    input:
        input_vcf = f'{config.outdir}/manta/{{sample}}_manta/results/variants/somaticSV.vcf.gz',
    output:
        f'{config.outdir}/manta/{{sample}}.vcf',
    conda:
        'envs/post_processing.yaml'
    shell:
        """
        scripts/bcftools_filter.sh {input.input_vcf} {output}
        """

# ==============================================================================
# TODO Smoove (lumpy/SVTYPER) rules
# Lumpy will just report all SVs so filtering will need to be done
# with STIX to get rid of germline variants
# ==============================================================================

# ==============================================================================
# TODO STIX filtering for germline SV callers
# ==============================================================================
